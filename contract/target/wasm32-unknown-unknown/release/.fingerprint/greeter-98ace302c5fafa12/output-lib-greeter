{"message":"unused imports: `BorshStorageKey`, `Gas`, `ext_contract`, `promise_result_as_success`, `require`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":116,"byte_end":128,"line_start":3,"line_end":3,"column_start":53,"column_end":65,"is_primary":true,"text":[{"text":"use near_sdk::{env, near_bindgen, assert_one_yocto, ext_contract, AccountId, Balance,","highlight_start":53,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":154,"byte_end":157,"line_start":4,"line_end":4,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":196,"byte_end":211,"line_start":4,"line_end":4,"column_start":47,"column_end":62,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":47,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":229,"byte_end":254,"line_start":4,"line_end":4,"column_start":80,"column_end":105,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":80,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":256,"byte_end":263,"line_start":4,"line_end":4,"column_start":107,"column_end":114,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":107,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":114,"byte_end":128,"line_start":3,"line_end":3,"column_start":51,"column_end":65,"is_primary":true,"text":[{"text":"use near_sdk::{env, near_bindgen, assert_one_yocto, ext_contract, AccountId, Balance,","highlight_start":51,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":148,"byte_end":157,"line_start":3,"line_end":4,"column_start":85,"column_end":8,"is_primary":true,"text":[{"text":"use near_sdk::{env, near_bindgen, assert_one_yocto, ext_contract, AccountId, Balance,","highlight_start":85,"highlight_end":86},{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":1,"highlight_end":8}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":194,"byte_end":211,"line_start":4,"line_end":4,"column_start":45,"column_end":62,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":45,"highlight_end":62}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":227,"byte_end":263,"line_start":4,"line_end":4,"column_start":78,"column_end":114,"is_primary":true,"text":[{"text":"    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};","highlight_start":78,"highlight_end":114}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BorshStorageKey`, `Gas`, `ext_contract`, `promise_result_as_success`, `require`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:3:53\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::{env, near_bindgen, assert_one_yocto, ext_contract, AccountId, Balance,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Gas, PanicOnDefault, Promise, CryptoHash, BorshStorageKey, PromiseOrValue, promise_result_as_success, require};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"value assigned to `token_id` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/mint.rs","byte_start":403,"byte_end":411,"line_start":15,"line_end":15,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"        let mut token_id = 0 as u64;","highlight_start":17,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `token_id` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mint.rs:15:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut token_id = 0 as u64;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"function is never used: `assert_one_yocto`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/internal.rs","byte_start":2109,"byte_end":2125,"line_start":49,"line_end":49,"column_start":15,"column_end":31,"is_primary":true,"text":[{"text":"pub(crate) fn assert_one_yocto() {","highlight_start":15,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function is never used: `assert_one_yocto`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/internal.rs:49:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub(crate) fn assert_one_yocto() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
